"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/NeuralNetwork.tsx":
/*!**************************************!*\
  !*** ./components/NeuralNetwork.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NeuralNetwork)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n// Generate fixed neuron positions using deterministic algorithm\nconst generateNeurons = ()=>{\n    const neurons = [];\n    const gridSize = 8;\n    const spread = 12;\n    for(let i = 0; i < 25; i++){\n        const gridX = i % gridSize * spread + Math.floor(i / gridSize) % 2 * (spread / 2);\n        const gridY = Math.floor(i / gridSize) * spread;\n        // Add some deterministic variation\n        const offsetX = i * 13 % 7 - 3;\n        const offsetY = i * 17 % 5 - 2;\n        neurons.push({\n            id: i,\n            x: 15 + gridX + offsetX,\n            y: 20 + gridY + offsetY,\n            connections: [],\n            pulseDelay: i * 0.3 % 4\n        });\n    }\n    // Create connections between nearby neurons\n    neurons.forEach((neuron, i)=>{\n        neurons.forEach((other, j)=>{\n            if (i !== j) {\n                const distance = Math.sqrt(Math.pow(neuron.x - other.x, 2) + Math.pow(neuron.y - other.y, 2));\n                if (distance < 20 && neuron.connections.length < 3) {\n                    neuron.connections.push(j);\n                }\n            }\n        });\n    });\n    return neurons;\n};\nfunction NeuralNetwork() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [mousePos, setMousePos] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 50,\n        y: 50\n    });\n    const [isMounted, setIsMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [activeNeuron, setActiveNeuron] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [pulses, setPulses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const neurons = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"NeuralNetwork.useMemo[neurons]\": ()=>generateNeurons()\n    }[\"NeuralNetwork.useMemo[neurons]\"], []);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            setIsMounted(true);\n        }\n    }[\"NeuralNetwork.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            if (!isMounted) return;\n            const handleMouseMove = {\n                \"NeuralNetwork.useEffect.handleMouseMove\": (e)=>{\n                    if (containerRef.current) {\n                        const rect = containerRef.current.getBoundingClientRect();\n                        const x = (e.clientX - rect.left) / rect.width * 100;\n                        const y = (e.clientY - rect.top) / rect.height * 100;\n                        setMousePos({\n                            x,\n                            y\n                        });\n                        // Find nearest neuron to mouse\n                        let nearestNeuron = null;\n                        let minDistance = 15; // Threshold distance\n                        neurons.forEach({\n                            \"NeuralNetwork.useEffect.handleMouseMove\": (neuron)=>{\n                                const distance = Math.sqrt(Math.pow(x - neuron.x, 2) + Math.pow(y - neuron.y, 2));\n                                if (distance < minDistance) {\n                                    minDistance = distance;\n                                    nearestNeuron = neuron.id;\n                                }\n                            }\n                        }[\"NeuralNetwork.useEffect.handleMouseMove\"]);\n                        setActiveNeuron(nearestNeuron);\n                    }\n                }\n            }[\"NeuralNetwork.useEffect.handleMouseMove\"];\n            const container = containerRef.current;\n            if (container) {\n                container.addEventListener(\"mousemove\", handleMouseMove);\n                container.addEventListener(\"mouseleave\", {\n                    \"NeuralNetwork.useEffect\": ()=>setActiveNeuron(null)\n                }[\"NeuralNetwork.useEffect\"]);\n            }\n            return ({\n                \"NeuralNetwork.useEffect\": ()=>{\n                    if (container) {\n                        container.removeEventListener(\"mousemove\", handleMouseMove);\n                        container.removeEventListener(\"mouseleave\", {\n                            \"NeuralNetwork.useEffect\": ()=>setActiveNeuron(null)\n                        }[\"NeuralNetwork.useEffect\"]);\n                    }\n                }\n            })[\"NeuralNetwork.useEffect\"];\n        }\n    }[\"NeuralNetwork.useEffect\"], [\n        isMounted,\n        neurons\n    ]);\n    // Animate pulses along connections\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            if (!isMounted) return;\n            const animatePulses = {\n                \"NeuralNetwork.useEffect.animatePulses\": ()=>{\n                    const now = Date.now();\n                    // Add new pulses periodically\n                    if (Math.random() < 0.02 && pulses.length < 10) {\n                        const randomNeuron = neurons[Math.floor(Math.random() * neurons.length)];\n                        if (randomNeuron.connections.length > 0) {\n                            const targetId = randomNeuron.connections[Math.floor(Math.random() * randomNeuron.connections.length)];\n                            setPulses({\n                                \"NeuralNetwork.useEffect.animatePulses\": (prev)=>[\n                                        ...prev,\n                                        {\n                                            id: \"\".concat(randomNeuron.id, \"-\").concat(targetId, \"-\").concat(now),\n                                            from: randomNeuron.id,\n                                            to: targetId,\n                                            progress: 0,\n                                            startTime: now\n                                        }\n                                    ]\n                            }[\"NeuralNetwork.useEffect.animatePulses\"]);\n                        }\n                    }\n                    // Update existing pulses\n                    setPulses({\n                        \"NeuralNetwork.useEffect.animatePulses\": (prev)=>prev.map({\n                                \"NeuralNetwork.useEffect.animatePulses\": (pulse)=>({\n                                        ...pulse,\n                                        progress: Math.min((now - pulse.startTime) / 1000, 1)\n                                    })\n                            }[\"NeuralNetwork.useEffect.animatePulses\"]).filter({\n                                \"NeuralNetwork.useEffect.animatePulses\": (pulse)=>pulse.progress < 1\n                            }[\"NeuralNetwork.useEffect.animatePulses\"])\n                    }[\"NeuralNetwork.useEffect.animatePulses\"]);\n                    animationRef.current = requestAnimationFrame(animatePulses);\n                }\n            }[\"NeuralNetwork.useEffect.animatePulses\"];\n            animationRef.current = requestAnimationFrame(animatePulses);\n            return ({\n                \"NeuralNetwork.useEffect\": ()=>{\n                    if (animationRef.current) {\n                        cancelAnimationFrame(animationRef.current);\n                    }\n                }\n            })[\"NeuralNetwork.useEffect\"];\n        }\n    }[\"NeuralNetwork.useEffect\"], [\n        isMounted,\n        neurons,\n        pulses.length\n    ]);\n    const getConnectionOpacity = (from, to)=>{\n        if (activeNeuron === from || activeNeuron === to) return 0.6;\n        return 0.15;\n    };\n    const getNeuronScale = (neuronId)=>{\n        var _neurons_activeNeuron;\n        if (activeNeuron === neuronId) return 1.5;\n        if (activeNeuron !== null && ((_neurons_activeNeuron = neurons[activeNeuron]) === null || _neurons_activeNeuron === void 0 ? void 0 : _neurons_activeNeuron.connections.includes(neuronId))) return 1.2;\n        return 1;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"absolute inset-0 overflow-hidden\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 bg-gradient-to-tr from-indigo-950/10 via-transparent to-purple-950/10\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 177,\n                columnNumber: 7\n            }, this),\n            isMounted && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                className: \"absolute inset-0 w-full h-full\",\n                children: [\n                    neurons.map((neuron)=>neuron.connections.map((targetId)=>{\n                            const target = neurons[targetId];\n                            if (!target) return null;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.line, {\n                                x1: \"\".concat(neuron.x, \"%\"),\n                                y1: \"\".concat(neuron.y, \"%\"),\n                                x2: \"\".concat(target.x, \"%\"),\n                                y2: \"\".concat(target.y, \"%\"),\n                                stroke: \"rgba(99, 102, 241, 0.3)\",\n                                strokeWidth: \"0.5\",\n                                initial: {\n                                    opacity: 0\n                                },\n                                animate: {\n                                    opacity: getConnectionOpacity(neuron.id, targetId),\n                                    stroke: activeNeuron === neuron.id || activeNeuron === targetId ? \"rgba(139, 92, 246, 0.5)\" : \"rgba(99, 102, 241, 0.3)\"\n                                },\n                                transition: {\n                                    duration: 0.3\n                                }\n                            }, \"\".concat(neuron.id, \"-\").concat(targetId), false, {\n                                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                lineNumber: 189,\n                                columnNumber: 17\n                            }, this);\n                        })),\n                    pulses.map((pulse)=>{\n                        const from = neurons[pulse.from];\n                        const to = neurons[pulse.to];\n                        if (!from || !to) return null;\n                        const x = from.x + (to.x - from.x) * pulse.progress;\n                        const y = from.y + (to.y - from.y) * pulse.progress;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                            cx: \"\".concat(x, \"%\"),\n                            cy: \"\".concat(y, \"%\"),\n                            r: \"2\",\n                            fill: \"rgba(168, 85, 247, 0.8)\",\n                            opacity: 1 - pulse.progress * 0.5,\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"animate\", {\n                                attributeName: \"r\",\n                                values: \"2;4;2\",\n                                dur: \"0.5s\",\n                                repeatCount: \"indefinite\"\n                            }, void 0, false, {\n                                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                lineNumber: 228,\n                                columnNumber: 17\n                            }, this)\n                        }, pulse.id, false, {\n                            fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                            lineNumber: 220,\n                            columnNumber: 15\n                        }, this);\n                    }),\n                    neurons.map((neuron)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.g, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.circle, {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: \"8\",\n                                    fill: \"rgba(139, 92, 246, 0.1)\",\n                                    initial: {\n                                        scale: 0\n                                    },\n                                    animate: {\n                                        scale: getNeuronScale(neuron.id),\n                                        opacity: activeNeuron === neuron.id ? 0.3 : 0.1\n                                    },\n                                    transition: {\n                                        duration: 0.3\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 242,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.circle, {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: \"3\",\n                                    fill: \"rgba(99, 102, 241, 0.5)\",\n                                    initial: {\n                                        scale: 0\n                                    },\n                                    animate: {\n                                        scale: getNeuronScale(neuron.id),\n                                        fill: activeNeuron === neuron.id ? \"rgba(168, 85, 247, 0.8)\" : \"rgba(99, 102, 241, 0.5)\"\n                                    },\n                                    transition: {\n                                        duration: 0.3,\n                                        delay: neuron.pulseDelay\n                                    },\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"animate\", {\n                                        attributeName: \"opacity\",\n                                        values: \"0.5;0.8;0.5\",\n                                        dur: \"\".concat(3 + neuron.pulseDelay, \"s\"),\n                                        repeatCount: \"indefinite\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                        lineNumber: 273,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 256,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: \"1\",\n                                    fill: \"rgba(255, 255, 255, 0.8)\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 282,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, neuron.id, true, {\n                            fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                            lineNumber: 240,\n                            columnNumber: 13\n                        }, this))\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 181,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-slate-950 to-transparent\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 295,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n        lineNumber: 175,\n        columnNumber: 5\n    }, this);\n}\n_s(NeuralNetwork, \"wi8b084h+8w0J9mmYlwunqWlXoc=\");\n_c = NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/NeuralNetwork.tsx\n"));

/***/ })

});