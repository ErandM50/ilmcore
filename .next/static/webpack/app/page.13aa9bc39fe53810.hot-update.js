"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/NeuralNetwork.tsx":
/*!**************************************!*\
  !*** ./components/NeuralNetwork.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NeuralNetwork)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n// Generate fixed neuron positions using deterministic algorithm\nconst generateNeurons = (countOverride)=>{\n    const neurons = [];\n    const gridSize = 8;\n    const spread = 12;\n    const total = typeof countOverride === 'number' ? countOverride : 25;\n    for(let i = 0; i < total; i++){\n        const gridX = i % gridSize * spread + Math.floor(i / gridSize) % 2 * (spread / 2);\n        const gridY = Math.floor(i / gridSize) * spread;\n        // Add some deterministic variation\n        const offsetX = i * 13 % 7 - 3;\n        const offsetY = i * 17 % 5 - 2;\n        neurons.push({\n            id: i,\n            x: 15 + gridX + offsetX,\n            y: 20 + gridY + offsetY,\n            connections: [],\n            pulseDelay: i * 0.3 % 4\n        });\n    }\n    // Create connections between nearby neurons\n    neurons.forEach((neuron, i)=>{\n        neurons.forEach((other, j)=>{\n            if (i !== j) {\n                const distance = Math.sqrt(Math.pow(neuron.x - other.x, 2) + Math.pow(neuron.y - other.y, 2));\n                if (distance < 20 && neuron.connections.length < 2) {\n                    neuron.connections.push(j);\n                }\n            }\n        });\n    });\n    return neurons;\n};\nfunction NeuralNetwork() {\n    var _containerRef_current, _containerRef_current1;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [mousePos, setMousePos] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 50,\n        y: 50\n    });\n    const [isMounted, setIsMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [activeNeuron, setActiveNeuron] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [pulses, setPulses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const isCoarsePointer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"NeuralNetwork.useMemo[isCoarsePointer]\": ()=> true && window.matchMedia && window.matchMedia('(pointer: coarse)').matches\n    }[\"NeuralNetwork.useMemo[isCoarsePointer]\"], []);\n    const prefersReducedMotion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"NeuralNetwork.useMemo[prefersReducedMotion]\": ()=> true && window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches\n    }[\"NeuralNetwork.useMemo[prefersReducedMotion]\"], []);\n    const neurons = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"NeuralNetwork.useMemo[neurons]\": ()=>generateNeurons(isCoarsePointer || prefersReducedMotion ? 16 : 25)\n    }[\"NeuralNetwork.useMemo[neurons]\"], [\n        isCoarsePointer,\n        prefersReducedMotion\n    ]);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            setIsMounted(true);\n        }\n    }[\"NeuralNetwork.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            if (!isMounted || prefersReducedMotion) return;\n            const handleMouseMove = {\n                \"NeuralNetwork.useEffect.handleMouseMove\": (e)=>{\n                    if (containerRef.current) {\n                        const rect = containerRef.current.getBoundingClientRect();\n                        const x = (e.clientX - rect.left) / rect.width * 100;\n                        const y = (e.clientY - rect.top) / rect.height * 100;\n                        setMousePos({\n                            x,\n                            y\n                        });\n                        if (!isCoarsePointer) {\n                            // Find nearest neuron to mouse\n                            let nearestNeuron = null;\n                            let minDistance = 16; // increase capture radius slightly\n                            neurons.forEach({\n                                \"NeuralNetwork.useEffect.handleMouseMove\": (neuron)=>{\n                                    const distance = Math.sqrt(Math.pow(x - neuron.x, 2) + Math.pow(y - neuron.y, 2));\n                                    if (distance < minDistance) {\n                                        minDistance = distance;\n                                        nearestNeuron = neuron.id;\n                                    }\n                                }\n                            }[\"NeuralNetwork.useEffect.handleMouseMove\"]);\n                            setActiveNeuron(nearestNeuron);\n                        }\n                    }\n                }\n            }[\"NeuralNetwork.useEffect.handleMouseMove\"];\n            const onMouseLeave = {\n                \"NeuralNetwork.useEffect.onMouseLeave\": ()=>setActiveNeuron(null)\n            }[\"NeuralNetwork.useEffect.onMouseLeave\"];\n            const container = containerRef.current;\n            if (container) {\n                container.addEventListener(\"mousemove\", handleMouseMove);\n                container.addEventListener(\"mouseleave\", onMouseLeave);\n            }\n            return ({\n                \"NeuralNetwork.useEffect\": ()=>{\n                    if (container) {\n                        container.removeEventListener(\"mousemove\", handleMouseMove);\n                        container.removeEventListener(\"mouseleave\", onMouseLeave);\n                    }\n                }\n            })[\"NeuralNetwork.useEffect\"];\n        }\n    }[\"NeuralNetwork.useEffect\"], [\n        isMounted,\n        neurons,\n        isCoarsePointer,\n        prefersReducedMotion\n    ]);\n    // Animate pulses along connections\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            if (!isMounted || prefersReducedMotion) return;\n            let lastSpawn = 0;\n            const spawnInterval = isCoarsePointer ? 1600 : 1200; // slower firing by default\n            const maxPulses = isCoarsePointer ? 4 : 6; // fewer concurrent pulses\n            const animatePulses = {\n                \"NeuralNetwork.useEffect.animatePulses\": ()=>{\n                    const now = Date.now();\n                    // Add new pulses with throttling\n                    if (now - lastSpawn > spawnInterval && pulses.length < maxPulses) {\n                        lastSpawn = now;\n                        const randomNeuron = neurons[Math.floor(Math.random() * neurons.length)];\n                        if (randomNeuron.connections.length > 0) {\n                            const targetId = randomNeuron.connections[Math.floor(Math.random() * randomNeuron.connections.length)];\n                            setPulses({\n                                \"NeuralNetwork.useEffect.animatePulses\": (prev)=>[\n                                        ...prev,\n                                        {\n                                            id: \"\".concat(randomNeuron.id, \"-\").concat(targetId, \"-\").concat(now),\n                                            from: randomNeuron.id,\n                                            to: targetId,\n                                            progress: 0,\n                                            startTime: now\n                                        }\n                                    ]\n                            }[\"NeuralNetwork.useEffect.animatePulses\"]);\n                        }\n                    }\n                    // Update existing pulses\n                    setPulses({\n                        \"NeuralNetwork.useEffect.animatePulses\": (prev)=>prev.map({\n                                \"NeuralNetwork.useEffect.animatePulses\": (pulse)=>({\n                                        ...pulse,\n                                        progress: Math.min((now - pulse.startTime) / 1100, 1)\n                                    })\n                            }[\"NeuralNetwork.useEffect.animatePulses\"]).filter({\n                                \"NeuralNetwork.useEffect.animatePulses\": (pulse)=>pulse.progress < 1\n                            }[\"NeuralNetwork.useEffect.animatePulses\"])\n                    }[\"NeuralNetwork.useEffect.animatePulses\"]);\n                    animationRef.current = requestAnimationFrame(animatePulses);\n                }\n            }[\"NeuralNetwork.useEffect.animatePulses\"];\n            animationRef.current = requestAnimationFrame(animatePulses);\n            return ({\n                \"NeuralNetwork.useEffect\": ()=>{\n                    if (animationRef.current) {\n                        cancelAnimationFrame(animationRef.current);\n                    }\n                }\n            })[\"NeuralNetwork.useEffect\"];\n        }\n    }[\"NeuralNetwork.useEffect\"], [\n        isMounted,\n        neurons,\n        pulses.length,\n        isCoarsePointer,\n        prefersReducedMotion\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            // Pause animation and effects when tab is hidden\n            const handleVisibility = {\n                \"NeuralNetwork.useEffect.handleVisibility\": ()=>{\n                    if (document.hidden && animationRef.current) {\n                        cancelAnimationFrame(animationRef.current);\n                    } else if (!prefersReducedMotion) {\n                        animationRef.current = requestAnimationFrame({\n                            \"NeuralNetwork.useEffect.handleVisibility\": ()=>{}\n                        }[\"NeuralNetwork.useEffect.handleVisibility\"]);\n                    }\n                }\n            }[\"NeuralNetwork.useEffect.handleVisibility\"];\n            document.addEventListener('visibilitychange', handleVisibility);\n            return ({\n                \"NeuralNetwork.useEffect\": ()=>document.removeEventListener('visibilitychange', handleVisibility)\n            })[\"NeuralNetwork.useEffect\"];\n        }\n    }[\"NeuralNetwork.useEffect\"], [\n        prefersReducedMotion\n    ]);\n    const getConnectionOpacity = (from, to)=>{\n        if (activeNeuron === from || activeNeuron === to) return 0.75;\n        return 0.08;\n    };\n    const getNeuronScale = (neuronId)=>{\n        var _neurons_activeNeuron;\n        if (activeNeuron === neuronId) return 1.35;\n        if (activeNeuron !== null && ((_neurons_activeNeuron = neurons[activeNeuron]) === null || _neurons_activeNeuron === void 0 ? void 0 : _neurons_activeNeuron.connections.includes(neuronId))) return 1.15;\n        return 1;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"absolute inset-0 overflow-hidden\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 bg-gradient-to-tr from-indigo-950/10 via-transparent to-purple-950/10\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 205,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0\",\n                style: {\n                    filter: 'blur(0.5px)'\n                }\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 208,\n                columnNumber: 7\n            }, this),\n            isMounted && !prefersReducedMotion && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                className: \"absolute inset-0 w-full h-full\",\n                children: [\n                    neurons.map((neuron)=>neuron.connections.map((targetId)=>{\n                            const target = neurons[targetId];\n                            if (!target) return null;\n                            const isActive = activeNeuron === neuron.id || activeNeuron === targetId;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.line, {\n                                x1: \"\".concat(neuron.x, \"%\"),\n                                y1: \"\".concat(neuron.y, \"%\"),\n                                x2: \"\".concat(target.x, \"%\"),\n                                y2: \"\".concat(target.y, \"%\"),\n                                stroke: \"rgba(99, 102, 241, 0.2)\",\n                                strokeWidth: 0.35,\n                                initial: {\n                                    opacity: 0\n                                },\n                                animate: {\n                                    opacity: getConnectionOpacity(neuron.id, targetId),\n                                    stroke: isActive ? \"rgba(139, 92, 246, 0.7)\" : \"rgba(99, 102, 241, 0.2)\",\n                                    strokeWidth: isActive ? 0.7 : 0.35\n                                },\n                                transition: {\n                                    duration: 0.2\n                                }\n                            }, \"\".concat(neuron.id, \"-\").concat(targetId), false, {\n                                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                lineNumber: 222,\n                                columnNumber: 17\n                            }, this);\n                        })),\n                    pulses.map((pulse)=>{\n                        const from = neurons[pulse.from];\n                        const to = neurons[pulse.to];\n                        if (!from || !to) return null;\n                        const x = from.x + (to.x - from.x) * pulse.progress;\n                        const y = from.y + (to.y - from.y) * pulse.progress;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                            cx: \"\".concat(x, \"%\"),\n                            cy: \"\".concat(y, \"%\"),\n                            r: \"1.8\",\n                            fill: \"rgba(168, 85, 247, 0.75)\",\n                            opacity: 1 - pulse.progress * 0.5,\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"animate\", {\n                                attributeName: \"r\",\n                                values: \"1.8;3;1.8\",\n                                dur: \"0.6s\",\n                                repeatCount: \"indefinite\"\n                            }, void 0, false, {\n                                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                lineNumber: 262,\n                                columnNumber: 17\n                            }, this)\n                        }, pulse.id, false, {\n                            fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                            lineNumber: 254,\n                            columnNumber: 15\n                        }, this);\n                    }),\n                    neurons.map((neuron)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.g, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.circle, {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: \"7\",\n                                    fill: \"rgba(139, 92, 246, 0.08)\",\n                                    initial: {\n                                        scale: 0\n                                    },\n                                    animate: {\n                                        scale: getNeuronScale(neuron.id),\n                                        opacity: activeNeuron === neuron.id ? 0.25 : 0.08\n                                    },\n                                    transition: {\n                                        duration: 0.3\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 276,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.circle, {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: \"2.6\",\n                                    fill: \"rgba(99, 102, 241, 0.45)\",\n                                    initial: {\n                                        scale: 0\n                                    },\n                                    animate: {\n                                        scale: getNeuronScale(neuron.id),\n                                        fill: activeNeuron === neuron.id ? \"rgba(168, 85, 247, 0.75)\" : \"rgba(99, 102, 241, 0.45)\"\n                                    },\n                                    transition: {\n                                        duration: 0.3,\n                                        delay: neuron.pulseDelay\n                                    },\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"animate\", {\n                                        attributeName: \"opacity\",\n                                        values: \"0.5;0.75;0.5\",\n                                        dur: \"\".concat(3 + neuron.pulseDelay, \"s\"),\n                                        repeatCount: \"indefinite\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                        lineNumber: 307,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 290,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: \"0.9\",\n                                    fill: \"rgba(255, 255, 255, 0.8)\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 316,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, neuron.id, true, {\n                            fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                            lineNumber: 274,\n                            columnNumber: 13\n                        }, this))\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 212,\n                columnNumber: 9\n            }, this),\n            isMounted && !prefersReducedMotion && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.div, {\n                className: \"absolute w-64 h-64 rounded-full pointer-events-none\",\n                animate: {\n                    x: mousePos.x * (((_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.offsetWidth) || 0) / 100 - 128,\n                    y: mousePos.y * (((_containerRef_current1 = containerRef.current) === null || _containerRef_current1 === void 0 ? void 0 : _containerRef_current1.offsetHeight) || 0) / 100 - 128\n                },\n                transition: {\n                    type: \"spring\",\n                    damping: 30,\n                    stiffness: 200\n                },\n                style: {\n                    background: \"radial-gradient(circle, rgba(139, 92, 246, 0.08) 0%, transparent 70%)\",\n                    filter: \"blur(40px)\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 329,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-slate-950 to-transparent\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 348,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-0 left-0 right-0 h-24 bg-gradient-to-b from-slate-950 to-transparent\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 349,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n        lineNumber: 203,\n        columnNumber: 5\n    }, this);\n}\n_s(NeuralNetwork, \"kJlSeec+ia4vUa9stf33bQsSW1A=\");\n_c = NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvTmV1cmFsTmV0d29yay50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUU2RDtBQUN0QjtBQWtCdkMsZ0VBQWdFO0FBQ2hFLE1BQU1LLGtCQUFrQixDQUFDQztJQUN2QixNQUFNQyxVQUFvQixFQUFFO0lBQzVCLE1BQU1DLFdBQVc7SUFDakIsTUFBTUMsU0FBUztJQUVmLE1BQU1DLFFBQVEsT0FBT0osa0JBQWtCLFdBQVdBLGdCQUFnQjtJQUVsRSxJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSUQsT0FBT0MsSUFBSztRQUM5QixNQUFNQyxRQUFRLElBQUtKLFdBQVlDLFNBQVMsS0FBTUssS0FBSyxDQUFDSCxJQUFJSCxZQUFZLElBQU1DLENBQUFBLFNBQVM7UUFDbkYsTUFBTU0sUUFBUUYsS0FBS0MsS0FBSyxDQUFDSCxJQUFJSCxZQUFZQztRQUV6QyxtQ0FBbUM7UUFDbkMsTUFBTU8sVUFBVSxJQUFNLEtBQU0sSUFBSztRQUNqQyxNQUFNQyxVQUFVLElBQU0sS0FBTSxJQUFLO1FBRWpDVixRQUFRVyxJQUFJLENBQUM7WUFDWEMsSUFBSVI7WUFDSlMsR0FBRyxLQUFLUixRQUFRSTtZQUNoQkssR0FBRyxLQUFLTixRQUFRRTtZQUNoQkssYUFBYSxFQUFFO1lBQ2ZDLFlBQVksSUFBSyxNQUFPO1FBQzFCO0lBQ0Y7SUFFQSw0Q0FBNEM7SUFDNUNoQixRQUFRaUIsT0FBTyxDQUFDLENBQUNDLFFBQVFkO1FBQ3ZCSixRQUFRaUIsT0FBTyxDQUFDLENBQUNFLE9BQU9DO1lBQ3RCLElBQUloQixNQUFNZ0IsR0FBRztnQkFDWCxNQUFNQyxXQUFXZixLQUFLZ0IsSUFBSSxDQUN4QmhCLEtBQUtpQixHQUFHLENBQUNMLE9BQU9MLENBQUMsR0FBR00sTUFBTU4sQ0FBQyxFQUFFLEtBQUtQLEtBQUtpQixHQUFHLENBQUNMLE9BQU9KLENBQUMsR0FBR0ssTUFBTUwsQ0FBQyxFQUFFO2dCQUVqRSxJQUFJTyxXQUFXLE1B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VztnQkFDYjtnQkFDQWhDLE9BQU87b0JBQ0xpQyxZQUFZO29CQUNaOUMsUUFBUTtnQkFDVjs7Ozs7OzBCQUtKLDhEQUFDVTtnQkFBSUUsV0FBVTs7Ozs7OzBCQUNmLDhEQUFDRjtnQkFBSUUsV0FBVTs7Ozs7Ozs7Ozs7O0FBR3JCO0dBaFN3QjlEO0tBQUFBIiwic291cmNlcyI6WyIvVXNlcnMvZXJhbmRtdWxsYS9pbG1jb3JlL2NvbXBvbmVudHMvTmV1cmFsTmV0d29yay50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcblxuaW50ZXJmYWNlIE5ldXJvbiB7XG4gIGlkOiBudW1iZXI7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICBjb25uZWN0aW9uczogbnVtYmVyW107XG4gIHB1bHNlRGVsYXk6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFB1bHNlIHtcbiAgaWQ6IHN0cmluZztcbiAgZnJvbTogbnVtYmVyO1xuICB0bzogbnVtYmVyO1xuICBwcm9ncmVzczogbnVtYmVyO1xuICBzdGFydFRpbWU6IG51bWJlcjtcbn1cblxuLy8gR2VuZXJhdGUgZml4ZWQgbmV1cm9uIHBvc2l0aW9ucyB1c2luZyBkZXRlcm1pbmlzdGljIGFsZ29yaXRobVxuY29uc3QgZ2VuZXJhdGVOZXVyb25zID0gKGNvdW50T3ZlcnJpZGU/OiBudW1iZXIpOiBOZXVyb25bXSA9PiB7XG4gIGNvbnN0IG5ldXJvbnM6IE5ldXJvbltdID0gW107XG4gIGNvbnN0IGdyaWRTaXplID0gODtcbiAgY29uc3Qgc3ByZWFkID0gMTI7XG5cbiAgY29uc3QgdG90YWwgPSB0eXBlb2YgY291bnRPdmVycmlkZSA9PT0gJ251bWJlcicgPyBjb3VudE92ZXJyaWRlIDogMjU7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG4gICAgY29uc3QgZ3JpZFggPSAoaSAlIGdyaWRTaXplKSAqIHNwcmVhZCArIChNYXRoLmZsb29yKGkgLyBncmlkU2l6ZSkgJSAyKSAqIChzcHJlYWQgLyAyKTtcbiAgICBjb25zdCBncmlkWSA9IE1hdGguZmxvb3IoaSAvIGdyaWRTaXplKSAqIHNwcmVhZDtcblxuICAgIC8vIEFkZCBzb21lIGRldGVybWluaXN0aWMgdmFyaWF0aW9uXG4gICAgY29uc3Qgb2Zmc2V0WCA9ICgoaSAqIDEzKSAlIDcpIC0gMztcbiAgICBjb25zdCBvZmZzZXRZID0gKChpICogMTcpICUgNSkgLSAyO1xuXG4gICAgbmV1cm9ucy5wdXNoKHtcbiAgICAgIGlkOiBpLFxuICAgICAgeDogMTUgKyBncmlkWCArIG9mZnNldFgsXG4gICAgICB5OiAyMCArIGdyaWRZICsgb2Zmc2V0WSxcbiAgICAgIGNvbm5lY3Rpb25zOiBbXSxcbiAgICAgIHB1bHNlRGVsYXk6IChpICogMC4zKSAlIDQsXG4gICAgfSk7XG4gIH1cblxuICAvLyBDcmVhdGUgY29ubmVjdGlvbnMgYmV0d2VlbiBuZWFyYnkgbmV1cm9uc1xuICBuZXVyb25zLmZvckVhY2goKG5ldXJvbiwgaSkgPT4ge1xuICAgIG5ldXJvbnMuZm9yRWFjaCgob3RoZXIsIGopID0+IHtcbiAgICAgIGlmIChpICE9PSBqKSB7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KFxuICAgICAgICAgIE1hdGgucG93KG5ldXJvbi54IC0gb3RoZXIueCwgMikgKyBNYXRoLnBvdyhuZXVyb24ueSAtIG90aGVyLnksIDIpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChkaXN0YW5jZSA8IDIwICYmIG5ldXJvbi5jb25uZWN0aW9ucy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgbmV1cm9uLmNvbm5lY3Rpb25zLnB1c2goaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIG5ldXJvbnM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOZXVyYWxOZXR3b3JrKCkge1xuICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBbbW91c2VQb3MsIHNldE1vdXNlUG9zXSA9IHVzZVN0YXRlKHsgeDogNTAsIHk6IDUwIH0pO1xuICBjb25zdCBbaXNNb3VudGVkLCBzZXRJc01vdW50ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWN0aXZlTmV1cm9uLCBzZXRBY3RpdmVOZXVyb25dID0gdXNlU3RhdGU8bnVtYmVyIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtwdWxzZXMsIHNldFB1bHNlc10gPSB1c2VTdGF0ZTxQdWxzZVtdPihbXSk7XG5cbiAgY29uc3QgaXNDb2Fyc2VQb2ludGVyID0gdXNlTWVtbygoKSA9PiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubWF0Y2hNZWRpYSAmJiB3aW5kb3cubWF0Y2hNZWRpYSgnKHBvaW50ZXI6IGNvYXJzZSknKS5tYXRjaGVzLCBbXSk7XG4gIGNvbnN0IHByZWZlcnNSZWR1Y2VkTW90aW9uID0gdXNlTWVtbygoKSA9PiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubWF0Y2hNZWRpYSAmJiB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSknKS5tYXRjaGVzLCBbXSk7XG5cbiAgY29uc3QgbmV1cm9ucyA9IHVzZU1lbW8oKCkgPT4gZ2VuZXJhdGVOZXVyb25zKGlzQ29hcnNlUG9pbnRlciB8fCBwcmVmZXJzUmVkdWNlZE1vdGlvbiA/IDE2IDogMjUpLCBbaXNDb2Fyc2VQb2ludGVyLCBwcmVmZXJzUmVkdWNlZE1vdGlvbl0pO1xuICBjb25zdCBhbmltYXRpb25SZWYgPSB1c2VSZWY8bnVtYmVyPigpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SXNNb3VudGVkKHRydWUpO1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWlzTW91bnRlZCB8fCBwcmVmZXJzUmVkdWNlZE1vdGlvbikgcmV0dXJuO1xuXG4gICAgY29uc3QgaGFuZGxlTW91c2VNb3ZlID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGlmIChjb250YWluZXJSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zdCByZWN0ID0gY29udGFpbmVyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IHggPSAoKGUuY2xpZW50WCAtIHJlY3QubGVmdCkgLyByZWN0LndpZHRoKSAqIDEwMDtcbiAgICAgICAgY29uc3QgeSA9ICgoZS5jbGllbnRZIC0gcmVjdC50b3ApIC8gcmVjdC5oZWlnaHQpICogMTAwO1xuICAgICAgICBzZXRNb3VzZVBvcyh7IHgsIHkgfSk7XG5cbiAgICAgICAgaWYgKCFpc0NvYXJzZVBvaW50ZXIpIHtcbiAgICAgICAgICAvLyBGaW5kIG5lYXJlc3QgbmV1cm9uIHRvIG1vdXNlXG4gICAgICAgICAgbGV0IG5lYXJlc3ROZXVyb246IG51bWJlciB8IG51bGwgPSBudWxsO1xuICAgICAgICAgIGxldCBtaW5EaXN0YW5jZSA9IDE2OyAvLyBpbmNyZWFzZSBjYXB0dXJlIHJhZGl1cyBzbGlnaHRseVxuXG4gICAgICAgICAgbmV1cm9ucy5mb3JFYWNoKChuZXVyb24pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICBNYXRoLnBvdyh4IC0gbmV1cm9uLngsIDIpICsgTWF0aC5wb3coeSAtIG5ldXJvbi55LCAyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgIG5lYXJlc3ROZXVyb24gPSBuZXVyb24uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzZXRBY3RpdmVOZXVyb24obmVhcmVzdE5ldXJvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgb25Nb3VzZUxlYXZlID0gKCkgPT4gc2V0QWN0aXZlTmV1cm9uKG51bGwpO1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVyUmVmLmN1cnJlbnQ7XG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlKTtcbiAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBvbk1vdXNlTGVhdmUpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoY29udGFpbmVyKSB7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBvbk1vdXNlTGVhdmUpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtpc01vdW50ZWQsIG5ldXJvbnMsIGlzQ29hcnNlUG9pbnRlciwgcHJlZmVyc1JlZHVjZWRNb3Rpb25dKTtcblxuICAvLyBBbmltYXRlIHB1bHNlcyBhbG9uZyBjb25uZWN0aW9uc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXNNb3VudGVkIHx8IHByZWZlcnNSZWR1Y2VkTW90aW9uKSByZXR1cm47XG5cbiAgICBsZXQgbGFzdFNwYXduID0gMDtcbiAgICBjb25zdCBzcGF3bkludGVydmFsID0gaXNDb2Fyc2VQb2ludGVyID8gMTYwMCA6IDEyMDA7IC8vIHNsb3dlciBmaXJpbmcgYnkgZGVmYXVsdFxuICAgIGNvbnN0IG1heFB1bHNlcyA9IGlzQ29hcnNlUG9pbnRlciA/IDQgOiA2OyAvLyBmZXdlciBjb25jdXJyZW50IHB1bHNlc1xuXG4gICAgY29uc3QgYW5pbWF0ZVB1bHNlcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICAgIC8vIEFkZCBuZXcgcHVsc2VzIHdpdGggdGhyb3R0bGluZ1xuICAgICAgaWYgKG5vdyAtIGxhc3RTcGF3biA+IHNwYXduSW50ZXJ2YWwgJiYgcHVsc2VzLmxlbmd0aCA8IG1heFB1bHNlcykge1xuICAgICAgICBsYXN0U3Bhd24gPSBub3c7XG4gICAgICAgIGNvbnN0IHJhbmRvbU5ldXJvbiA9IG5ldXJvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbmV1cm9ucy5sZW5ndGgpXTtcbiAgICAgICAgaWYgKHJhbmRvbU5ldXJvbi5jb25uZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0SWQgPSByYW5kb21OZXVyb24uY29ubmVjdGlvbnNbXG4gICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kb21OZXVyb24uY29ubmVjdGlvbnMubGVuZ3RoKVxuICAgICAgICAgIF07XG5cbiAgICAgICAgICBzZXRQdWxzZXMocHJldiA9PiBbLi4ucHJldiwge1xuICAgICAgICAgICAgaWQ6IGAke3JhbmRvbU5ldXJvbi5pZH0tJHt0YXJnZXRJZH0tJHtub3d9YCxcbiAgICAgICAgICAgIGZyb206IHJhbmRvbU5ldXJvbi5pZCxcbiAgICAgICAgICAgIHRvOiB0YXJnZXRJZCxcbiAgICAgICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICAgICAgc3RhcnRUaW1lOiBub3csXG4gICAgICAgICAgfV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBwdWxzZXNcbiAgICAgIHNldFB1bHNlcyhwcmV2ID0+IHByZXZcbiAgICAgICAgLm1hcChwdWxzZSA9PiAoe1xuICAgICAgICAgIC4uLnB1bHNlLFxuICAgICAgICAgIHByb2dyZXNzOiBNYXRoLm1pbigobm93IC0gcHVsc2Uuc3RhcnRUaW1lKSAvIDExMDAsIDEpLFxuICAgICAgICB9KSlcbiAgICAgICAgLmZpbHRlcihwdWxzZSA9PiBwdWxzZS5wcm9ncmVzcyA8IDEpXG4gICAgICApO1xuXG4gICAgICBhbmltYXRpb25SZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlUHVsc2VzKTtcbiAgICB9O1xuXG4gICAgYW5pbWF0aW9uUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZVB1bHNlcyk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGFuaW1hdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvblJlZi5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaXNNb3VudGVkLCBuZXVyb25zLCBwdWxzZXMubGVuZ3RoLCBpc0NvYXJzZVBvaW50ZXIsIHByZWZlcnNSZWR1Y2VkTW90aW9uXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBQYXVzZSBhbmltYXRpb24gYW5kIGVmZmVjdHMgd2hlbiB0YWIgaXMgaGlkZGVuXG4gICAgY29uc3QgaGFuZGxlVmlzaWJpbGl0eSA9ICgpID0+IHtcbiAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4gJiYgYW5pbWF0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uUmVmLmN1cnJlbnQpO1xuICAgICAgfSBlbHNlIGlmICghcHJlZmVyc1JlZHVjZWRNb3Rpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge30pO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHkpO1xuICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eSk7XG4gIH0sIFtwcmVmZXJzUmVkdWNlZE1vdGlvbl0pO1xuXG4gIGNvbnN0IGdldENvbm5lY3Rpb25PcGFjaXR5ID0gKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4ge1xuICAgIGlmIChhY3RpdmVOZXVyb24gPT09IGZyb20gfHwgYWN0aXZlTmV1cm9uID09PSB0bykgcmV0dXJuIDAuNzU7XG4gICAgcmV0dXJuIDAuMDg7XG4gIH07XG5cbiAgY29uc3QgZ2V0TmV1cm9uU2NhbGUgPSAobmV1cm9uSWQ6IG51bWJlcikgPT4ge1xuICAgIGlmIChhY3RpdmVOZXVyb24gPT09IG5ldXJvbklkKSByZXR1cm4gMS4zNTtcbiAgICBpZiAoYWN0aXZlTmV1cm9uICE9PSBudWxsICYmIG5ldXJvbnNbYWN0aXZlTmV1cm9uXT8uY29ubmVjdGlvbnMuaW5jbHVkZXMobmV1cm9uSWQpKSByZXR1cm4gMS4xNTtcbiAgICByZXR1cm4gMTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtjb250YWluZXJSZWZ9IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICB7LyogQmFzZSBncmFkaWVudCBvdmVybGF5ICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIGJnLWdyYWRpZW50LXRvLXRyIGZyb20taW5kaWdvLTk1MC8xMCB2aWEtdHJhbnNwYXJlbnQgdG8tcHVycGxlLTk1MC8xMFwiPjwvZGl2PlxuXG4gICAgICB7LyogU29mdCBnbG9iYWwgYmx1ciB0byByZWR1Y2Ugc2hhcnBuZXNzICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wXCIgc3R5bGU9e3sgZmlsdGVyOiAnYmx1cigwLjVweCknIH19IC8+XG5cbiAgICAgIHsvKiBOZXVyYWwgbmV0d29yayB2aXN1YWxpemF0aW9uICovfVxuICAgICAge2lzTW91bnRlZCAmJiAhcHJlZmVyc1JlZHVjZWRNb3Rpb24gJiYgKFxuICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgdy1mdWxsIGgtZnVsbFwiPlxuICAgICAgICAgIHsvKiBDb25uZWN0aW9ucyAqL31cbiAgICAgICAgICB7bmV1cm9ucy5tYXAoKG5ldXJvbikgPT5cbiAgICAgICAgICAgIG5ldXJvbi5jb25uZWN0aW9ucy5tYXAoKHRhcmdldElkKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IG5ldXJvbnNbdGFyZ2V0SWRdO1xuICAgICAgICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgICAgY29uc3QgaXNBY3RpdmUgPSBhY3RpdmVOZXVyb24gPT09IG5ldXJvbi5pZCB8fCBhY3RpdmVOZXVyb24gPT09IHRhcmdldElkO1xuXG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPG1vdGlvbi5saW5lXG4gICAgICAgICAgICAgICAgICBrZXk9e2Ake25ldXJvbi5pZH0tJHt0YXJnZXRJZH1gfVxuICAgICAgICAgICAgICAgICAgeDE9e2Ake25ldXJvbi54fSVgfVxuICAgICAgICAgICAgICAgICAgeTE9e2Ake25ldXJvbi55fSVgfVxuICAgICAgICAgICAgICAgICAgeDI9e2Ake3RhcmdldC54fSVgfVxuICAgICAgICAgICAgICAgICAgeTI9e2Ake3RhcmdldC55fSVgfVxuICAgICAgICAgICAgICAgICAgc3Ryb2tlPVwicmdiYSg5OSwgMTAyLCAyNDEsIDAuMilcIlxuICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9ezAuMzV9XG4gICAgICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAgfX1cbiAgICAgICAgICAgICAgICAgIGFuaW1hdGU9e3tcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogZ2V0Q29ubmVjdGlvbk9wYWNpdHkobmV1cm9uLmlkLCB0YXJnZXRJZCksXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogaXNBY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICA/IFwicmdiYSgxMzksIDkyLCAyNDYsIDAuNylcIlxuICAgICAgICAgICAgICAgICAgICAgIDogXCJyZ2JhKDk5LCAxMDIsIDI0MSwgMC4yKVwiLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogaXNBY3RpdmUgPyAwLjcgOiAwLjM1LFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuMiB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICl9XG5cbiAgICAgICAgICB7LyogUHVsc2VzICovfVxuICAgICAgICAgIHtwdWxzZXMubWFwKChwdWxzZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnJvbSA9IG5ldXJvbnNbcHVsc2UuZnJvbV07XG4gICAgICAgICAgICBjb25zdCB0byA9IG5ldXJvbnNbcHVsc2UudG9dO1xuICAgICAgICAgICAgaWYgKCFmcm9tIHx8ICF0bykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IHggPSBmcm9tLnggKyAodG8ueCAtIGZyb20ueCkgKiBwdWxzZS5wcm9ncmVzcztcbiAgICAgICAgICAgIGNvbnN0IHkgPSBmcm9tLnkgKyAodG8ueSAtIGZyb20ueSkgKiBwdWxzZS5wcm9ncmVzcztcblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgIGtleT17cHVsc2UuaWR9XG4gICAgICAgICAgICAgICAgY3g9e2Ake3h9JWB9XG4gICAgICAgICAgICAgICAgY3k9e2Ake3l9JWB9XG4gICAgICAgICAgICAgICAgcj1cIjEuOFwiXG4gICAgICAgICAgICAgICAgZmlsbD1cInJnYmEoMTY4LCA4NSwgMjQ3LCAwLjc1KVwiXG4gICAgICAgICAgICAgICAgb3BhY2l0eT17MSAtIHB1bHNlLnByb2dyZXNzICogMC41fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGFuaW1hdGVcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU9XCJyXCJcbiAgICAgICAgICAgICAgICAgIHZhbHVlcz1cIjEuODszOzEuOFwiXG4gICAgICAgICAgICAgICAgICBkdXI9XCIwLjZzXCJcbiAgICAgICAgICAgICAgICAgIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9jaXJjbGU+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pfVxuXG4gICAgICAgICAgey8qIE5ldXJvbnMgKi99XG4gICAgICAgICAge25ldXJvbnMubWFwKChuZXVyb24pID0+IChcbiAgICAgICAgICAgIDxtb3Rpb24uZyBrZXk9e25ldXJvbi5pZH0+XG4gICAgICAgICAgICAgIHsvKiBPdXRlciBnbG93ICovfVxuICAgICAgICAgICAgICA8bW90aW9uLmNpcmNsZVxuICAgICAgICAgICAgICAgIGN4PXtgJHtuZXVyb24ueH0lYH1cbiAgICAgICAgICAgICAgICBjeT17YCR7bmV1cm9uLnl9JWB9XG4gICAgICAgICAgICAgICAgcj1cIjdcIlxuICAgICAgICAgICAgICAgIGZpbGw9XCJyZ2JhKDEzOSwgOTIsIDI0NiwgMC4wOClcIlxuICAgICAgICAgICAgICAgIGluaXRpYWw9e3sgc2NhbGU6IDAgfX1cbiAgICAgICAgICAgICAgICBhbmltYXRlPXt7XG4gICAgICAgICAgICAgICAgICBzY2FsZTogZ2V0TmV1cm9uU2NhbGUobmV1cm9uLmlkKSxcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IGFjdGl2ZU5ldXJvbiA9PT0gbmV1cm9uLmlkID8gMC4yNSA6IDAuMDhcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuMyB9fVxuICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgIHsvKiBJbm5lciBuZXVyb24gKi99XG4gICAgICAgICAgICAgIDxtb3Rpb24uY2lyY2xlXG4gICAgICAgICAgICAgICAgY3g9e2Ake25ldXJvbi54fSVgfVxuICAgICAgICAgICAgICAgIGN5PXtgJHtuZXVyb24ueX0lYH1cbiAgICAgICAgICAgICAgICByPVwiMi42XCJcbiAgICAgICAgICAgICAgICBmaWxsPVwicmdiYSg5OSwgMTAyLCAyNDEsIDAuNDUpXCJcbiAgICAgICAgICAgICAgICBpbml0aWFsPXt7IHNjYWxlOiAwIH19XG4gICAgICAgICAgICAgICAgYW5pbWF0ZT17e1xuICAgICAgICAgICAgICAgICAgc2NhbGU6IGdldE5ldXJvblNjYWxlKG5ldXJvbi5pZCksXG4gICAgICAgICAgICAgICAgICBmaWxsOiBhY3RpdmVOZXVyb24gPT09IG5ldXJvbi5pZFxuICAgICAgICAgICAgICAgICAgICA/IFwicmdiYSgxNjgsIDg1LCAyNDcsIDAuNzUpXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcInJnYmEoOTksIDEwMiwgMjQxLCAwLjQ1KVwiXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7XG4gICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC4zLFxuICAgICAgICAgICAgICAgICAgZGVsYXk6IG5ldXJvbi5wdWxzZURlbGF5LFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8YW5pbWF0ZVxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTmFtZT1cIm9wYWNpdHlcIlxuICAgICAgICAgICAgICAgICAgdmFsdWVzPVwiMC41OzAuNzU7MC41XCJcbiAgICAgICAgICAgICAgICAgIGR1cj17YCR7MyArIG5ldXJvbi5wdWxzZURlbGF5fXNgfVxuICAgICAgICAgICAgICAgICAgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L21vdGlvbi5jaXJjbGU+XG5cbiAgICAgICAgICAgICAgey8qIENvcmUgKi99XG4gICAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgICBjeD17YCR7bmV1cm9uLnh9JWB9XG4gICAgICAgICAgICAgICAgY3k9e2Ake25ldXJvbi55fSVgfVxuICAgICAgICAgICAgICAgIHI9XCIwLjlcIlxuICAgICAgICAgICAgICAgIGZpbGw9XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOClcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9tb3Rpb24uZz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9zdmc+XG4gICAgICApfVxuXG4gICAgICB7LyogTW91c2UgZ2xvdyBlZmZlY3QgKi99XG4gICAgICB7aXNNb3VudGVkICYmICFwcmVmZXJzUmVkdWNlZE1vdGlvbiAmJiAoXG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdy02NCBoLTY0IHJvdW5kZWQtZnVsbCBwb2ludGVyLWV2ZW50cy1ub25lXCJcbiAgICAgICAgICBhbmltYXRlPXt7XG4gICAgICAgICAgICB4OiBtb3VzZVBvcy54ICogKGNvbnRhaW5lclJlZi5jdXJyZW50Py5vZmZzZXRXaWR0aCB8fCAwKSAvIDEwMCAtIDEyOCxcbiAgICAgICAgICAgIHk6IG1vdXNlUG9zLnkgKiAoY29udGFpbmVyUmVmLmN1cnJlbnQ/Lm9mZnNldEhlaWdodCB8fCAwKSAvIDEwMCAtIDEyOCxcbiAgICAgICAgICB9fVxuICAgICAgICAgIHRyYW5zaXRpb249e3tcbiAgICAgICAgICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgICAgICAgICBkYW1waW5nOiAzMCxcbiAgICAgICAgICAgIHN0aWZmbmVzczogMjAwLFxuICAgICAgICAgIH19XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IFwicmFkaWFsLWdyYWRpZW50KGNpcmNsZSwgcmdiYSgxMzksIDkyLCAyNDYsIDAuMDgpIDAlLCB0cmFuc3BhcmVudCA3MCUpXCIsXG4gICAgICAgICAgICBmaWx0ZXI6IFwiYmx1cig0MHB4KVwiLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7LyogRWRnZSBmYWRlcyBmb3IgYmxlbmRpbmcgKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGJvdHRvbS0wIGxlZnQtMCByaWdodC0wIGgtMzIgYmctZ3JhZGllbnQtdG8tdCBmcm9tLXNsYXRlLTk1MCB0by10cmFuc3BhcmVudFwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMCBsZWZ0LTAgcmlnaHQtMCBoLTI0IGJnLWdyYWRpZW50LXRvLWIgZnJvbS1zbGF0ZS05NTAgdG8tdHJhbnNwYXJlbnRcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn0iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VNZW1vIiwibW90aW9uIiwiZ2VuZXJhdGVOZXVyb25zIiwiY291bnRPdmVycmlkZSIsIm5ldXJvbnMiLCJncmlkU2l6ZSIsInNwcmVhZCIsInRvdGFsIiwiaSIsImdyaWRYIiwiTWF0aCIsImZsb29yIiwiZ3JpZFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInB1c2giLCJpZCIsIngiLCJ5IiwiY29ubmVjdGlvbnMiLCJwdWxzZURlbGF5IiwiZm9yRWFjaCIsIm5ldXJvbiIsIm90aGVyIiwiaiIsImRpc3RhbmNlIiwic3FydCIsInBvdyIsImxlbmd0aCIsIk5ldXJhbE5ldHdvcmsiLCJjb250YWluZXJSZWYiLCJtb3VzZVBvcyIsInNldE1vdXNlUG9zIiwiaXNNb3VudGVkIiwic2V0SXNNb3VudGVkIiwiYWN0aXZlTmV1cm9uIiwic2V0QWN0aXZlTmV1cm9uIiwicHVsc2VzIiwic2V0UHVsc2VzIiwiaXNDb2Fyc2VQb2ludGVyIiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJwcmVmZXJzUmVkdWNlZE1vdGlvbiIsImFuaW1hdGlvblJlZiIsImhhbmRsZU1vdXNlTW92ZSIsImUiLCJjdXJyZW50IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJsZWZ0Iiwid2lkdGgiLCJjbGllbnRZIiwidG9wIiwiaGVpZ2h0IiwibmVhcmVzdE5ldXJvbiIsIm1pbkRpc3RhbmNlIiwib25Nb3VzZUxlYXZlIiwiY29udGFpbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsYXN0U3Bhd24iLCJzcGF3bkludGVydmFsIiwibWF4UHVsc2VzIiwiYW5pbWF0ZVB1bHNlcyIsIm5vdyIsIkRhdGUiLCJyYW5kb21OZXVyb24iLCJyYW5kb20iLCJ0YXJnZXRJZCIsInByZXYiLCJmcm9tIiwidG8iLCJwcm9ncmVzcyIsInN0YXJ0VGltZSIsIm1hcCIsInB1bHNlIiwibWluIiwiZmlsdGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJoYW5kbGVWaXNpYmlsaXR5IiwiZG9jdW1lbnQiLCJoaWRkZW4iLCJnZXRDb25uZWN0aW9uT3BhY2l0eSIsImdldE5ldXJvblNjYWxlIiwibmV1cm9uSWQiLCJpbmNsdWRlcyIsImRpdiIsInJlZiIsImNsYXNzTmFtZSIsInN0eWxlIiwic3ZnIiwidGFyZ2V0IiwiaXNBY3RpdmUiLCJsaW5lIiwieDEiLCJ5MSIsIngyIiwieTIiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsImluaXRpYWwiLCJvcGFjaXR5IiwiYW5pbWF0ZSIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImNpcmNsZSIsImN4IiwiY3kiLCJyIiwiZmlsbCIsImF0dHJpYnV0ZU5hbWUiLCJ2YWx1ZXMiLCJkdXIiLCJyZXBlYXRDb3VudCIsImciLCJzY2FsZSIsImRlbGF5Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ0eXBlIiwiZGFtcGluZyIsInN0aWZmbmVzcyIsImJhY2tncm91bmQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/NeuralNetwork.tsx\n"));

/***/ })

});