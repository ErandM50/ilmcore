"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/NeuralNetwork.tsx":
/*!**************************************!*\
  !*** ./components/NeuralNetwork.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NeuralNetwork)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n// Generate fixed neuron positions using deterministic algorithm\nconst generateNeurons = ()=>{\n    const neurons = [];\n    const layers = [\n        {\n            count: 8,\n            spread: 15,\n            yPos: 20,\n            type: 'primary'\n        },\n        {\n            count: 12,\n            spread: 10,\n            yPos: 50,\n            type: 'secondary'\n        },\n        {\n            count: 15,\n            spread: 8,\n            yPos: 80,\n            type: 'tertiary'\n        }\n    ];\n    let neuronId = 0;\n    layers.forEach((layer, layerIndex)=>{\n        for(let i = 0; i < layer.count; i++){\n            const angle = i / layer.count * Math.PI * 2;\n            const radius = layer.spread + neuronId * 7 % 5;\n            const centerX = 50 + layerIndex * 13 % 20 - 10;\n            neurons.push({\n                id: neuronId,\n                x: centerX + Math.cos(angle) * radius,\n                y: layer.yPos + Math.sin(angle) * radius * 0.6,\n                connections: [],\n                pulseDelay: neuronId * 0.3 % 4,\n                type: layer.type,\n                size: layer.type === 'primary' ? 4 : layer.type === 'secondary' ? 3 : 2\n            });\n            neuronId++;\n        }\n    });\n    // Create brain-like synaptic connections\n    neurons.forEach((neuron, i)=>{\n        neurons.forEach((other, j)=>{\n            if (i !== j) {\n                const distance = Math.sqrt(Math.pow(neuron.x - other.x, 2) + Math.pow(neuron.y - other.y, 2));\n                const maxConnections = neuron.type === 'primary' ? 4 : neuron.type === 'secondary' ? 3 : 2;\n                const maxDistance = neuron.type === 'primary' ? 25 : 20;\n                if (distance < maxDistance && neuron.connections.length < maxConnections) {\n                    // Prefer connections within same type or adjacent types\n                    const typePriority = neuron.type === other.type || neuron.type === 'primary' && other.type === 'secondary' || neuron.type === 'secondary' && other.type === 'tertiary';\n                    if (typePriority || distance < 15) {\n                        neuron.connections.push(j);\n                    }\n                }\n            }\n        });\n    });\n    return neurons;\n};\n// Generate starry background\nconst generateStars = ()=>{\n    const stars = [];\n    for(let i = 0; i < 100; i++){\n        stars.push({\n            id: i,\n            x: i * 37 % 100,\n            y: i * 23 % 100,\n            size: i * 3 % 3 + 0.5,\n            twinkleDelay: i * 0.2 % 3,\n            brightness: 0.3 + i * 7 % 5 * 0.1\n        });\n    }\n    return stars;\n};\nfunction NeuralNetwork() {\n    var _containerRef_current, _containerRef_current1;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [mousePos, setMousePos] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 50,\n        y: 50\n    });\n    const [isMounted, setIsMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [activeNeuron, setActiveNeuron] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [pulses, setPulses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const neurons = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"NeuralNetwork.useMemo[neurons]\": ()=>generateNeurons()\n    }[\"NeuralNetwork.useMemo[neurons]\"], []);\n    const stars = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"NeuralNetwork.useMemo[stars]\": ()=>generateStars()\n    }[\"NeuralNetwork.useMemo[stars]\"], []);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            setIsMounted(true);\n        }\n    }[\"NeuralNetwork.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            if (!isMounted) return;\n            const handleMouseMove = {\n                \"NeuralNetwork.useEffect.handleMouseMove\": (e)=>{\n                    if (containerRef.current) {\n                        const rect = containerRef.current.getBoundingClientRect();\n                        const x = (e.clientX - rect.left) / rect.width * 100;\n                        const y = (e.clientY - rect.top) / rect.height * 100;\n                        setMousePos({\n                            x,\n                            y\n                        });\n                        // Find nearest neuron to mouse\n                        let nearestNeuron = null;\n                        let minDistance = 15; // Threshold distance\n                        neurons.forEach({\n                            \"NeuralNetwork.useEffect.handleMouseMove\": (neuron)=>{\n                                const distance = Math.sqrt(Math.pow(x - neuron.x, 2) + Math.pow(y - neuron.y, 2));\n                                if (distance < minDistance) {\n                                    minDistance = distance;\n                                    nearestNeuron = neuron.id;\n                                }\n                            }\n                        }[\"NeuralNetwork.useEffect.handleMouseMove\"]);\n                        setActiveNeuron(nearestNeuron);\n                    }\n                }\n            }[\"NeuralNetwork.useEffect.handleMouseMove\"];\n            const container = containerRef.current;\n            if (container) {\n                container.addEventListener(\"mousemove\", handleMouseMove);\n                container.addEventListener(\"mouseleave\", {\n                    \"NeuralNetwork.useEffect\": ()=>setActiveNeuron(null)\n                }[\"NeuralNetwork.useEffect\"]);\n            }\n            return ({\n                \"NeuralNetwork.useEffect\": ()=>{\n                    if (container) {\n                        container.removeEventListener(\"mousemove\", handleMouseMove);\n                        container.removeEventListener(\"mouseleave\", {\n                            \"NeuralNetwork.useEffect\": ()=>setActiveNeuron(null)\n                        }[\"NeuralNetwork.useEffect\"]);\n                    }\n                }\n            })[\"NeuralNetwork.useEffect\"];\n        }\n    }[\"NeuralNetwork.useEffect\"], [\n        isMounted,\n        neurons\n    ]);\n    // Animate pulses along connections\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"NeuralNetwork.useEffect\": ()=>{\n            if (!isMounted) return;\n            const animatePulses = {\n                \"NeuralNetwork.useEffect.animatePulses\": ()=>{\n                    const now = Date.now();\n                    // Add new pulses periodically\n                    if (Math.random() < 0.02 && pulses.length < 10) {\n                        const randomNeuron = neurons[Math.floor(Math.random() * neurons.length)];\n                        if (randomNeuron.connections.length > 0) {\n                            const targetId = randomNeuron.connections[Math.floor(Math.random() * randomNeuron.connections.length)];\n                            setPulses({\n                                \"NeuralNetwork.useEffect.animatePulses\": (prev)=>[\n                                        ...prev,\n                                        {\n                                            id: \"\".concat(randomNeuron.id, \"-\").concat(targetId, \"-\").concat(now),\n                                            from: randomNeuron.id,\n                                            to: targetId,\n                                            progress: 0,\n                                            startTime: now\n                                        }\n                                    ]\n                            }[\"NeuralNetwork.useEffect.animatePulses\"]);\n                        }\n                    }\n                    // Update existing pulses\n                    setPulses({\n                        \"NeuralNetwork.useEffect.animatePulses\": (prev)=>prev.map({\n                                \"NeuralNetwork.useEffect.animatePulses\": (pulse)=>({\n                                        ...pulse,\n                                        progress: Math.min((now - pulse.startTime) / 1000, 1)\n                                    })\n                            }[\"NeuralNetwork.useEffect.animatePulses\"]).filter({\n                                \"NeuralNetwork.useEffect.animatePulses\": (pulse)=>pulse.progress < 1\n                            }[\"NeuralNetwork.useEffect.animatePulses\"])\n                    }[\"NeuralNetwork.useEffect.animatePulses\"]);\n                    animationRef.current = requestAnimationFrame(animatePulses);\n                }\n            }[\"NeuralNetwork.useEffect.animatePulses\"];\n            animationRef.current = requestAnimationFrame(animatePulses);\n            return ({\n                \"NeuralNetwork.useEffect\": ()=>{\n                    if (animationRef.current) {\n                        cancelAnimationFrame(animationRef.current);\n                    }\n                }\n            })[\"NeuralNetwork.useEffect\"];\n        }\n    }[\"NeuralNetwork.useEffect\"], [\n        isMounted,\n        neurons,\n        pulses.length\n    ]);\n    const getConnectionOpacity = (from, to)=>{\n        if (activeNeuron === from || activeNeuron === to) return 0.4;\n        return 0.08;\n    };\n    const getNeuronScale = (neuronId)=>{\n        var _neurons_activeNeuron;\n        if (activeNeuron === neuronId) return 1.8;\n        if (activeNeuron !== null && ((_neurons_activeNeuron = neurons[activeNeuron]) === null || _neurons_activeNeuron === void 0 ? void 0 : _neurons_activeNeuron.connections.includes(neuronId))) return 1.3;\n        return 1;\n    };\n    const getConnectionColor = (from, to)=>{\n        if (activeNeuron === from.id || activeNeuron === to.id) {\n            return \"rgba(147, 197, 253, 0.3)\";\n        }\n        if (from.type === 'primary' && to.type === 'primary') {\n            return \"rgba(165, 180, 252, 0.15)\";\n        }\n        return \"rgba(99, 102, 241, 0.1)\";\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"absolute inset-0 overflow-hidden\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 bg-gradient-to-b from-slate-950 via-slate-950/95 to-indigo-950/20\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 231,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0 bg-gradient-radial from-blue-950/5 via-transparent to-purple-950/10\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 234,\n                columnNumber: 7\n            }, this),\n            isMounted && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute inset-0\",\n                children: stars.map((star)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.div, {\n                        className: \"absolute rounded-full\",\n                        style: {\n                            left: \"\".concat(star.x, \"%\"),\n                            top: \"\".concat(star.y, \"%\"),\n                            width: star.size,\n                            height: star.size,\n                            background: 'rgba(255, 255, 255, 0.8)',\n                            boxShadow: \"0 0 \".concat(star.size * 2, \"px rgba(255, 255, 255, \").concat(star.brightness, \")\")\n                        },\n                        animate: {\n                            opacity: [\n                                star.brightness,\n                                star.brightness * 1.5,\n                                star.brightness\n                            ]\n                        },\n                        transition: {\n                            duration: 3 + star.twinkleDelay,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                        }\n                    }, star.id, false, {\n                        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                        lineNumber: 240,\n                        columnNumber: 13\n                    }, this))\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 238,\n                columnNumber: 9\n            }, this),\n            isMounted && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                className: \"absolute inset-0 w-full h-full\",\n                children: [\n                    neurons.map((neuron)=>neuron.connections.map((targetId)=>{\n                            const target = neurons[targetId];\n                            if (!target) return null;\n                            // Create curved path for more organic look\n                            const midX = (neuron.x + target.x) / 2 + neuron.id * 3 % 5 - 2.5;\n                            const midY = (neuron.y + target.y) / 2 + targetId * 2 % 4 - 2;\n                            const path = \"M \".concat(neuron.x, \"% \").concat(neuron.y, \"% Q \").concat(midX, \"% \").concat(midY, \"%, \").concat(target.x, \"% \").concat(target.y, \"%\");\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.path, {\n                                        d: path,\n                                        stroke: getConnectionColor(neuron, target),\n                                        strokeWidth: \"2\",\n                                        fill: \"none\",\n                                        strokeLinecap: \"round\",\n                                        initial: {\n                                            opacity: 0\n                                        },\n                                        animate: {\n                                            opacity: getConnectionOpacity(neuron.id, targetId) * 0.3\n                                        },\n                                        transition: {\n                                            duration: 0.3\n                                        },\n                                        filter: \"blur(3px)\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                        lineNumber: 281,\n                                        columnNumber: 19\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.path, {\n                                        d: path,\n                                        stroke: getConnectionColor(neuron, target),\n                                        strokeWidth: \"0.3\",\n                                        fill: \"none\",\n                                        strokeLinecap: \"round\",\n                                        initial: {\n                                            opacity: 0,\n                                            pathLength: 0\n                                        },\n                                        animate: {\n                                            opacity: getConnectionOpacity(neuron.id, targetId),\n                                            pathLength: 1\n                                        },\n                                        transition: {\n                                            opacity: {\n                                                duration: 0.3\n                                            },\n                                            pathLength: {\n                                                duration: 2,\n                                                delay: neuron.pulseDelay * 0.1\n                                            }\n                                        }\n                                    }, void 0, false, {\n                                        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                        lineNumber: 295,\n                                        columnNumber: 19\n                                    }, this)\n                                ]\n                            }, \"\".concat(neuron.id, \"-\").concat(targetId), true, {\n                                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                lineNumber: 279,\n                                columnNumber: 17\n                            }, this);\n                        })),\n                    pulses.map((pulse)=>{\n                        const from = neurons[pulse.from];\n                        const to = neurons[pulse.to];\n                        if (!from || !to) return null;\n                        const x = from.x + (to.x - from.x) * pulse.progress;\n                        const y = from.y + (to.y - from.y) * pulse.progress;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                    cx: \"\".concat(x, \"%\"),\n                                    cy: \"\".concat(y, \"%\"),\n                                    r: \"6\",\n                                    fill: \"rgba(147, 197, 253, 0.2)\",\n                                    opacity: (1 - pulse.progress * 0.5) * 0.5,\n                                    filter: \"blur(4px)\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 328,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                    cx: \"\".concat(x, \"%\"),\n                                    cy: \"\".concat(y, \"%\"),\n                                    r: \"1.5\",\n                                    fill: \"rgba(191, 219, 254, 0.9)\",\n                                    opacity: 1 - pulse.progress * 0.3,\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"animate\", {\n                                        attributeName: \"r\",\n                                        values: \"1.5;3;1.5\",\n                                        dur: \"0.5s\",\n                                        repeatCount: \"indefinite\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                        lineNumber: 344,\n                                        columnNumber: 19\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 337,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, pulse.id, true, {\n                            fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                            lineNumber: 326,\n                            columnNumber: 15\n                        }, this);\n                    }),\n                    neurons.map((neuron)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.g, {\n                            children: [\n                                neuron.type === 'primary' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                                    opacity: \"0.15\",\n                                    children: [\n                                        0,\n                                        60,\n                                        120,\n                                        180,\n                                        240,\n                                        300\n                                    ].map((angle)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                                            x1: \"\".concat(neuron.x, \"%\"),\n                                            y1: \"\".concat(neuron.y, \"%\"),\n                                            x2: \"\".concat(neuron.x + Math.cos(angle * Math.PI / 180) * 2, \"%\"),\n                                            y2: \"\".concat(neuron.y + Math.sin(angle * Math.PI / 180) * 2, \"%\"),\n                                            stroke: \"rgba(147, 197, 253, 0.3)\",\n                                            strokeWidth: \"0.2\"\n                                        }, angle, false, {\n                                            fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                            lineNumber: 362,\n                                            columnNumber: 21\n                                        }, this))\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 360,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.circle, {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: neuron.size * 3,\n                                    fill: \"none\",\n                                    stroke: \"rgba(147, 197, 253, 0.05)\",\n                                    strokeWidth: \"0.5\",\n                                    initial: {\n                                        scale: 0\n                                    },\n                                    animate: {\n                                        scale: getNeuronScale(neuron.id),\n                                        opacity: activeNeuron === neuron.id ? 0.2 : 0.05\n                                    },\n                                    transition: {\n                                        duration: 0.3\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 376,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.circle, {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: neuron.size * 2,\n                                    fill: \"rgba(165, 180, 252, 0.1)\",\n                                    filter: \"blur(4px)\",\n                                    initial: {\n                                        scale: 0\n                                    },\n                                    animate: {\n                                        scale: getNeuronScale(neuron.id),\n                                        opacity: activeNeuron === neuron.id ? 0.4 : 0.15\n                                    },\n                                    transition: {\n                                        duration: 0.3\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 392,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.circle, {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: neuron.size,\n                                    fill: \"rgba(191, 219, 254, 0.2)\",\n                                    stroke: \"rgba(147, 197, 253, 0.3)\",\n                                    strokeWidth: \"0.2\",\n                                    initial: {\n                                        scale: 0\n                                    },\n                                    animate: {\n                                        scale: getNeuronScale(neuron.id),\n                                        fill: activeNeuron === neuron.id ? \"rgba(165, 180, 252, 0.4)\" : \"rgba(191, 219, 254, 0.2)\"\n                                    },\n                                    transition: {\n                                        duration: 0.3,\n                                        delay: neuron.pulseDelay * 0.1\n                                    },\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"animate\", {\n                                        attributeName: \"opacity\",\n                                        values: \"0.3;0.6;0.3\",\n                                        dur: \"\".concat(4 + neuron.pulseDelay, \"s\"),\n                                        repeatCount: \"indefinite\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                        lineNumber: 426,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 407,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                    cx: \"\".concat(neuron.x, \"%\"),\n                                    cy: \"\".concat(neuron.y, \"%\"),\n                                    r: neuron.size * 0.3,\n                                    fill: \"rgba(255, 255, 255, 0.3)\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                                    lineNumber: 435,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, neuron.id, true, {\n                            fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                            lineNumber: 357,\n                            columnNumber: 13\n                        }, this))\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 266,\n                columnNumber: 9\n            }, this),\n            isMounted && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.div, {\n                className: \"absolute w-96 h-96 rounded-full pointer-events-none\",\n                animate: {\n                    x: mousePos.x * (((_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.offsetWidth) || 0) / 100 - 192,\n                    y: mousePos.y * (((_containerRef_current1 = containerRef.current) === null || _containerRef_current1 === void 0 ? void 0 : _containerRef_current1.offsetHeight) || 0) / 100 - 192\n                },\n                transition: {\n                    type: \"spring\",\n                    damping: 25,\n                    stiffness: 150\n                },\n                style: {\n                    background: \"radial-gradient(circle, rgba(147, 197, 253, 0.05) 0%, rgba(165, 180, 252, 0.02) 40%, transparent 70%)\",\n                    filter: \"blur(60px)\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 448,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-slate-950 to-transparent\"\n            }, void 0, false, {\n                fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n                lineNumber: 467,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/erandmulla/ilmcore/components/NeuralNetwork.tsx\",\n        lineNumber: 229,\n        columnNumber: 5\n    }, this);\n}\n_s(NeuralNetwork, \"PyX+3YTPepgpsx/c0dDoRy6br38=\");\n_c = NeuralNetwork;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetwork\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/NeuralNetwork.tsx\n"));

/***/ })

});